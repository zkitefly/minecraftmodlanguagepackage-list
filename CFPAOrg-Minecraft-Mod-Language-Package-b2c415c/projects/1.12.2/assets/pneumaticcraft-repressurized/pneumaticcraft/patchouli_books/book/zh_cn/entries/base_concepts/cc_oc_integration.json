{
  "name": "CC/OC 联动",
  "icon": "pneumaticcraft:textures/patchouli/computer.png",
  "category": "base_concepts",
  "flag": "|mod:computercraft,mod:opencomputers",
  "pages": [
    {
      "type": "text",
      "text": "同时安装了$(thing)电脑/$模组或者$(thing)开放式电脑/$模组时，可以使用其与$(pncr)的任何机器，以及$(l:machines/drone_interface)无人机/$进行交互。$(p)下面列出的所有机器都可以以 CC/OC 外设的形式被交互。"
    },
    {
      "type": "text",
      "title": "ComputerCraft",
      "text": "在 Lua 中，可以运行 $(thing)m = peripheral.wrap(<面>)/$ 来调用外设，其中 $(thing)<面>/$ 代表外设被连接在哪一面上，可以为 top（顶面）, bottom（底面）, right（右面）, left（左面）, back（前面）, front（后面）。此后可以通过 $(thing)m.<函数名>/$ 调用下面提及的所有函数。$(p)下午所有以 <面> 作为参数的地方中，up，down，north，south，east，west 为合法参数。",
      "flag": "mod:computercraft"
    },
    {
      "type": "text",
      "title": "Open Computers",
      "text": "需要使用$(item)适配器/$把电脑与$(pncr)机器相连接；其将会被识别为 OC 中的组件，在 OC Lua 环境中运行 $(thing)=components.list()/$ 时将被列出。此后下列提及的所有函数可被调用，例如：$(thing)p = components.air_compressor.getPressure()/$ 将获取所连接的$(item)空气压缩机/$的当前压力。",
      "flag": "mod:opencomputers"
    },
    {
      "type": "text",
      "title": "一般方法",
      "text": "下列方法对于$(italic)所有/$$(pncr)的机器都适用：$(li)$(#800)getPressure(), getPressure(<面>)/$：获取该方块的压力。<面>参数是可选的，只在获取$(l:machines/vacuum_pump)真空泵/$的压力时用到，因为其有与朝向相关的压力值。$(li)$(#800)getDangerPressure()/$：获取机器可能爆炸的压力极限。$(li)$(#800)getCriticalPressure()/$：获取机器必定会爆炸的压力极限。"
    },
    {
      "type": "text",
      "title": "热相关方法",
      "text": "下列方法对于$(italic)所有/$$(pncr)的支持$(l:base_concepts/heat)热量/$的机器都适用：$(li)$(#800)getTemperature(), getTemperature(<面>)/$：获取该方块的温度。<面>参数是可选的，只在获取$(l:machines/vortex_tube)涡流管/$的温度时用到，因为其有与朝向相关的温度值。"
    },
    {
      "type": "spotlight",
      "anchor": "air_cannon",
      "item": "pneumaticcraft:air_cannon",
      "text": "$(li)$(#800)setExternalControl(<true/false>)/$：传参为 true 时，将会禁用使用通常的方式旋转（插入定位工具，更改范围升级的数量……）。$(li)$(#800)setTargetLocation(<x>,<y>,<z>)/$：使空气加农炮指向传入的坐标，而非在定位工具中存储的坐标。"
    },
    {
      "type": "text",
      "title": "空气炮（续表）",
      "text": "$(li)$(#800)setRotationAngle(<角度>)/$：使空气加农炮偏转角旋转为指定的角度。$(li)$(#800)setHeightAngle(<角度>)/$: 使空气加农炮将仰角角旋转为指定的角度。$(li)$(#800)isDoneRotating()/$：当加农炮完成旋转后，返回 true。$(li)$(#800)getMinWorkingPressure()/$：返回加农炮发射所需要的最小压力（机器界面中黄色与绿色的分界线）。"
    },
    {
      "type": "text",
      "title": "空气炮（续表）",
      "text": "$(li)$(#800)fire()/$：当有足够的压力发射并且放置有物品时，发射。成功时返回 true。"
    },
    {
      "type": "spotlight",
      "anchor": "elevator",
      "item": "pneumaticcraft:elevator_base",
      "title": "电梯",
      "text": "$(li)$(#800)setExternalControl(<true/false>)/$：传参为 true 时，将会把电梯的$(#f00)红石模式/$设置为“电梯呼叫器”模式，此时同样可以被电脑控制。不需要在调用 $(#800)setTargetHeight()/$ 前调用该方法；该方法会自动将电梯调整为电梯呼叫器模式。"
    },
    {
      "type": "text",
      "title": "电梯（续表）",
      "text": "$(li)$(#800)getMinWorkingPressure()/$：返回使电梯上升的最小压力（机器界面中内黄色与绿色的分界线）。电梯下降过程不需要压力。$(li)$(#800)setTargetHeight(<高度>)/$：把电梯的目标高度设为传入的高度（单位为米/格，浮点数）。$(li)$(#800)getTargetHeight()/$：获取电梯的目标高度（单位为米/格，浮点数）。$(li)$(#800)getCurrentHeight()/$：获取电梯的当前高度（单位为米/格，浮点数）。"
    },
    {
      "type": "spotlight",
      "anchor": "plastic_mixer",
      "item": "pneumaticcraft:plastic_mixer",
      "text": "$(li)$(#800)selectColor(<色彩索引>)/$：设置所选要生产的塑料颜色设为索引（1-16）指定的颜色。调用 $(#800)selectColor(0)/$ 将取消颜色选择。"
    },
    {
      "type": "spotlight",
      "anchor": "universal_sensor",
      "item": "pneumaticcraft:universal_sensor",
      "text": "$(li)$(#800)getSensorNames()/$：以列表的形式返回所有传感器的名称。$(li)$(#800)getSensor()/$：返回当前选择的传感器的名称。"
    },
    {
      "type": "text",
      "title": "万能传感器（续表）",
      "text": "$(li)$(#800)setSensor(<传感器名称>), setSensor(<索引>), setSensor()/$：设置当前选择的传感器。<传感器名称>应当属于 $(#800)getSensorNames()/$ 返回的列表。<索引>是 $(#800)getSensorNames()/$ 所返回的列表的索引。调用不传参的 $(#800)setSensor()/$ 时，没有传感器被选择（机器将闲置，不使用空气）。如果当前安装的升级允许传入的传感器，返回 true。 "
    },
    {
      "type": "text",
      "title": "万能传感器（续表）",
      "text": "$(li)$(#800)setTextField(<文本>)/$：有些传感器使用一个文本框指定附加选项（如：“范围内的实体”传感器接受$(l:base_concepts/entity_filter)实体过滤字符串/$）。可以通过此方法指定这一文本参数。$(li)$(#800)getTextField()/$：返回$(thing)万能传感器/$当前存储的文本参数。"
    },
    {
      "type": "text",
      "title": "万能传感器（续表）",
      "text": "$(li)$(#800)isSensorEventBased()/$：有两类传感器：基于事件的，以及基于轮询的。基于时间的传感器会等待到一个时间发生（玩家攻击，捡起物品）。基于轮询的传感器隔一段时间检查一次状态（范围内的实体，世界时间，下雨）。如果当前选择的传感器是基于事件的，返回 true。"
    },
    {
      "type": "text",
      "title": "万能传感器（续表）",
      "text": "$(li)$(#800)getSensorValue()/$：如果目前的传感器是基于轮询的，返回其（未取反的）红石输出。注意：设置传感器后马上读取数据并不可靠，因为很多基于轮询的传感器并不很频繁地轮询，以此来提高性能。因此。该方法发起一个拉取事件，并获取响应该事件的输出。当未选择基于轮询的传感器时，将抛出一个异常。"
    },
    {
      "type": "text",
      "title": "万能传感器（续表）",
      "text": "$(li)$(#800)getMinWorkingPressure()/$：返回万能传感器工作需要的最小压力（机器界面中黄色与绿色的分界线）。$(li)$(#800)setGPSToolCoordinate(<槽位索引>,<x>,<y>,<z>)/$:把<槽位索引>（从 1 开始）处对应的定位工具存储的坐标设为提供的坐标。对于需要一个坐标的传感器这很有用。"
    },
    {
      "type": "text",
      "title": "万能传感器（续表）",
      "text": "对于基于事件的传感器（如：玩家右击传感器），需要基于事件获取传感器的值。使用 $(#800)<返回值> = os.PullEvent(\"universalSensor\")/$ 获取事件。一般而言，返回值包括 <eventName, redstoneStrength>。玩家右击传感器是一个例外：其返回 <eventName, redstoneStrength, interactedX, interactedY, interactedZ>。这允许一些有趣的用法……"
    }
  ]
}




