{
  "name": "自定义增强",
  "icon": "minecraft:potato",
  "category": "thermal:modpack",
  "read_by_default": true,
  "pages": [
    {
      "type": "text",
      "text": "热力系列的增强体系诞生于模块化、客制化及灵活性的主旨之中。所有增强均基于 NBT 数据，这就意味着你可以通过修改物品 NBT 来为其施加任意修饰数值。换句话说，热力所提供的增强并无特殊之处 —— 只要拥有合规的 NBT 数据，所有物品均可被视为一件增强物，马铃薯也不例外。"
    },
    {
      "type": "text",
      "text": "类型（增强目标）和修饰值是构成一个增强物的必要条件。类型决定了该增强可被装入哪种方块内，也决定了它是否可以叠加。在$(l:thermal:technology/augments/introduction)增强章节的导言部分$(/l)可以了解到更多信息。若没有指定类型，则该增强将没有特定的限制。"
    },
    {
      "type": "text",
      "text": "修饰值均以若干对“属性 - 数值”的形式被指定给物品，属性即修饰项，数值即修饰项的具体数值。，即使部分修饰项（例如药水效果等级）建议使用整型来指定数值，所有修饰数值实质上均为浮点数。后续将对此作详细介绍。"
    },
    {
      "type": "link",
      "url": "https://github.com/KingLemming/1.16/blob/fe263e24b6f872bbacd7599c73f78ed44098d105/CoFHCore/src/main/java/cofh/lib/util/constants/NBTTags.java#L101",
      "link_text": "Github 链接",
      "text": "NBT 数据的大体格式如下：$(br2){AugmentData:$(br){Type:'[增强类型]',$(br)[修饰项 1]:[浮点数]f, $(br)[修饰项 2]:[浮点数]f, $(br)[...]}}$(br2)在下方 King Lemming 的 GitHub 链接中可以查询到所有可用的增强类型与修饰项。"
    },
    {
      "type": "text",
      "text": "所以，举个例子，现在要做一个增强物，使得装有该增强的机器以 0 耗能处理所有配方（本质上就等于“创造通量提效”），那么你可以单击来执行以下指令：$(br)$(c:/summon minecraft:item ~ ~ ~ {Item:{id:'minecraft:sea_pickle',Count:1b,tag:{AugmentData:{Type:'Machine',MachineEnergy:0.0f}}}})/give $(playername) minecraft:sea_pickle{AugmentData:{Type:'Machine',MachineEnergy:0.0f}} 1$(/c)$(br2)对于出现修饰项重复的多个“属性 - 数值”对的情况，结算时采取的是靠后优先的规则。"
    },
    {
      "type": "text",
      "title": "关于增强叠加",
      "text": "特定属性是不可叠加的。也就是说，如果单个工具/方块拥有多个修饰项相同的增强，则仅有修饰数值较优的一个增强会起效，且其数值会以$(n)下划线$()标示出来。可叠加性是修饰项的固有特性，举例来说，RFMax 永不可叠加，但 Radius 永远可叠加，无关乎数值。"
    },
    {
      "type": "text",
      "title": "关于浮点数",
      "text": "上面说到，所有输入数值均为浮点数，而部分修饰数值看似只能为整型。在这种情况下，输入的浮点数会取最近的整型来显示。但不管怎样，工具或方块加装这种增强后的实际表现还是会因修饰项及对应数值而有所不同。"
    }
  ]
}