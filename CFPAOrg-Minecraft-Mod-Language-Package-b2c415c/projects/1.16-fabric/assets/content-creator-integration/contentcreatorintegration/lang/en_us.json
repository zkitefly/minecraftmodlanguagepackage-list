{
  "cci.config.general": "This mod is a product of way too many hours of development and testing and is provided free to bridge the gap between content creators and their supporters. Consider donating to the mod author via the CurseForge page!",
  "cci.config.socket": "Category for socket tokens. These tokens are more likely than not, sensitive information, so be careful who you show these to.\n\nREMEMBER to add quotes around your token.\n\nIf you change these tokens whilst the game is running, please use \"/cci\" and open the Connections window on the top left to restart the sockets.",
  "cci.config.streamlabsTokens": "Socket Api Tokens for Streamlabs. One token per line. Most likely requires a Streamlabs widget to be open when running. I would recommend the event list widget. To find your socket API token: Go to Streamlabs -> Dashboard -> Settings (in left sidebar) -> API Settings -> API Tokens -> Your Socket API Token",
  "cci.config.streamElementsTokens": "JWT Tokens for StreamElements. One token per line. To find your JWT token: Go to StreamElements -> Dashboard -> Click on your profile name (top right) -> (In Channels tab) Show secrets. Bear in mind that StreamElements test events do not always match live events, when making configs for StreamElements you should try and compare against live events whenever possible.",
  "cci.config.donationAlertsTokens": "Tokens for DonationAlerts. One token per line.",
  "cci.config.twitchChats": "Twitch channels' chat to listen to. One channel per line.\nWe also support OAuth keys, append to the end of the name after a colon (:). EG: \"ohaiichun:<oauthkey>\"",
  "cci.config.youtube.youtubeChannels": "YouTube channel IDs' chat to listen to. One channel per line. Whilst we prefer the channel ID, you can use the user ID too. You can find it in your channel's url. youtube.com/channel/<channel id>, or youtube.com/user/<channel id>",
  "cci.config.youtube.apiKey": "We need a Google API key to connect to chats. Follow the instructions on this page, in the \"Before you start\" section: https://developers.google.com/youtube/v3/live/getting-started#before-you-start .\n\nThe API Key we need is the one defined in the link in Step 2: Register your application.",
  "cci.config.twitch.pubsub.autoRefreshTwitchTokenGen": "We can try and automatically refresh your OAuth and Refresh Tokens for you if you are using twitchtokengenerator.com. Would you like that?",
  "cci.config.twitch.pubsub.refreshToken": "If you were given a refresh token when you generated your OAuth Token, you can use this config to store it.",
  "cci.config.twitch.pubsub.twitchOauthTokens": "We need an OAuth token with the following scopes: bits:read, chat:read, channel:moderate, channel:read:hype_train, channel:read:polls, channel:read:predictions, channel:read:redemptions, channel:read:subscriptions. You can generate one from https://twitchtokengenerator.com/ or use this URL: https://twitchtokengenerator.com/quick/jIAulxmVAS",
  "cci.config.firstRun": "Keeping this on/true makes CCI trigger the first run wizard settings. Turned off by CCI later.",
  "cci.config.overrideToastGui": "The Minecraft Toast Renderer has a bug where toasts with different heights might overlap. This override fixes it if the renderer is still the default renderer.",
  "cci.config.streamerName": "Set this if your streamer name is different from your Minecraft name for the $streamer global variable.",
  "cci.config.maxAutomaticReconnects": "Maximum amount of automatic reconnects before trying giving up.",
  "cci.config.enableInformationToasts": "The sockets we use can be unreliable at times. Turn this on to get toasts about their status and other events.",
  "cci.config.onlineConfigs": "URLs to pull online configs from. These should link to a raw file of the configuration. These configs will override local configs.",
  "cci.config.stats": "Enable local statistics collection? This information is for your own personal reference. None of it is be sent externally.",
  "cci.config.allowOutcomesRequiringServerWait": "Allow outcomes that require a server to wait until the user connects to a server that allows them to send outcomes? Outcomes are normally discarded otherwise.",
  "cci.config.maxEventCache": "Maximum size of the event cache. Caching prevents retriggers of events and allows you to play back events in the CCI gui, but takes more memory.",
  "cci.config.logTypes": "Types of log types to write to disk. Putting socket_event in is the only way to see the raw event information (from the log file) as it is not printed to console. Everything else will still be print to console.",
  "cci.config.editorGuiScale": "Adjust the scale of the Event Configuration editor. Setting it to 0 makes it follow Minecraft's GUI scale. Set to -1 to do nothing.",
  "cci.config.guiListExpand": "When you select a config in the editor it automatically expands all items with AT MOST this many items.",
  "cci.config.guiMinecraftStyle": "Renders Boxes & Stuff's GUIs in a Minecraft Style instead. 1 = Vanilla Style, 2 = Texture Pack Style",
  "cci.config.guiDockPadding": "How much padding to add to the docked windows.",
  "cci.config.guiDockBorder": "Number of pixels before Boxes & Stuff thinks you're trying to dock a window",
  "cci.config.guiDoubleClickSpeed": "Speed, in ticks, to register a double click",
  "cci.config.guiTooltipCooldown": "Number of ticks before showing a tooltip",
  "cci.config.defaultProfile": "Default profile name. If set to \"default\", loads from the main CCI directory. If set, will read from that folder within the main CCI directory instead. Change in-game with the editor.",
  "cci.config.whitelistedUsers": "Whitelisted Users. These users will be able to trigger serverside outcomes.",
  "cci.config.enableBlacklist": "Converts the list of whitelisted users to be the list of blacklisted users.",
  "cci.config.commandPermissionLevel": "Permission level required to use the CCI's server command (the /cci command)",
  "cci.config.disallowedCommands": "Disallowed Commands. These commands are prevented from being executed by CommandOutcome. EG: To disable \"/time set day\", add the \"time\" command to the list. Does not cover for aliases (EG: /tp and /teleport)",
  "cci.command.profile.profileChanged": "Profile changed!",
  "cci.command.profile.errorChangingProfile": "Error changing profile to %s",
  "cci.command.replay.noCache": "No cache for %s found.",
  "cci.command.replay.noEvents": "No events logged for %s.",
  "cci.command.replay.indexTooHigh": "Index too high!",
  "cci.command.reconnect.failed": "Failed to reconnect %s",
  "cci.command.disconnect.failed": "Failed to disconnect %s",
  "cci.command.nosockets": "No sockets.",
  "cci.command.whitelist.client": "You are trying to whitelist another user from a client! It has to be done on the server console!",
  "cci.command.userWhitelisted": "Whitelisted %s.",
  "cci.command.userAlreadyWhitelisted": "That user is already whitelisted.",
  "cci.command.userNotWhitelisted": "%s not whitelisted.",
  "cci.command.userDewhitelisted": "%s removed from whitelist.",
  "cci.command.toggleBlacklist": "Blacklist now set to %s",
  "cci.command.debug.on": "CCI Debug Mode turned on.",
  "cci.command.debug.info": "Debug Mode allows CCI to read past Streamlabs/StreamElements events in a \"test.log\" file.\nCopy out their event lines from the logs and put it in a \"test.log\" file in your profile folder (where all the json files are).\nHit Shift+Tab to cycle through the lines of test.log.\nYou should have your console open to see the outputs.",
  "cci.command.dump.success": "Successfully dumped cached events to dump.json.",
  "cci.command.dump.fail": "Failed to dump events to dump.json",
  "cci.firstRun.toast.title": "Set up CCI?",
  "cci.firstRun.toast.subtitle": "Click on the CCI button to start the Setup Wizard",
  "cci.firstRun.toast.later.title": "Later? Okay.",
  "cci.firstRun.toast.later.subtitle": "You can always run it in the Help window in CCI's menu.",
  "cci.firstRun.setup.name": "Setup Wizard",
  "cci.firstRun.setup.intro": "(Clippy voice) I see you're trying to set up CCI! Which service would you like to set up?",
  "cci.firstRun.setup.introReturn": "(Still in a Clippy voice) Welcome back! Would you like to set up another service?",
  "cci.firstRun.setup.caution": "Be careful who you show this off to. Some of these things can be sensitive info!",
  "cci.firstRun.setup.show": "Show",
  "cci.firstRun.setup.showTooltip": "Show text in the text fields.",
  "cci.firstRun.setup.changeName": "Change Streamer Name",
  "cci.firstRun.setup.changeNameDetail": "Is your streamer name different from your Minecraft name? Would you like to set it?",
  "window.popup.title": "Alert!",
  "cci.gui.title.configEditor": "Event Configuration Editor",
  "cci.gui.title.popup": "CCI Popup",
  "cci.gui.title.configs": "Configs",
  "cci.gui.title.setConstantName": "Set Constant Name",
  "cci.gui.noTokens": "No socket tokens or chat channels found",
  "cci.gui.button.addNewComponent": "Add New Component",
  "cci.gui.button.removeCurrentComponent": "Remove Current Component",
  "cci.gui.button.moveComponentUp": "Move Component Up",
  "cci.gui.button.moveComponentDown": "Move Component Down",
  "cci.gui.button.editComponent": "Edit Component",
  "cci.gui.button.enterComponent": "Enter Component",
  "cci.gui.button.save": "Save and Apply",
  "cci.gui.button.reloadConfigurations": "Reload Configuration Files",
  "cci.gui.button.exitWithoutSaving": "Exit Without Saving",
  "cci.gui.button.saveAndExit": "Save and Exit",
  "cci.gui.button.stats": "Statistics",
  "cci.gui.button.statsReset": "Shift-click to reset statistics",
  "cci.gui.button.statsButton": "Statistics",
  "cci.gui.toolbar.cut": "Cut!",
  "cci.gui.toolbar.copy": "Copied!",
  "cci.gui.toolbar.newProfile": "New Profile\n\nHold CTRL to rename\n\nHold SHIFT to open Profile Directory instead",
  "cci.gui.toolbar.events": "Events",
  "cci.gui.toolbar.eventViewer": "Event Viewer",
  "cci.gui.toolbar.connections": "Connections",
  "cci.gui.toolbar.exit": "Exit",
  "cci.gui.toolbar.saveError": "Error Saving! Check Console for more details.",
  "cci.gui.toolbar.shiftSave": "Hold SHIFT when clicking this button to Save whilst exiting.",
  "cci.gui.toolbar.saveApplied": "Saved and Applied!",
  "cci.gui.toolbar.save": "Save",
  "cci.gui.toolbar.reload": "Reload",
  "cci.gui.toolbar.reloaded": "Reloaded all local configuration files",
  "cci.gui.toolbar.help": "Help",
  "cci.gui.toolbar.server": "Server: %s",
  "cci.gui.toolbar.server.tooltip": "Are you allowed to trigger server-side Outcomes?",
  "cci.gui.nav.collapseAll": "Collapse All",
  "cci.gui.nav.expandAll": "Expand all in current",
  "cci.gui.nav.viewConfig": "View Specific Config",
  "cci.gui.nav.viewLibrary": "View Specific Library",
  "cci.gui.lib.createNew": "Create New Library",
  "cci.gui.lib.name": "Library Name",
  "cci.gui.lib.title": "Library - %s",
  "cci.gui.text.editing.title": "Editing",
  "cci.gui.text.editing.invalid": "Invalid input",
  "cci.gui.text.confirmExit.title": "Confirm exit?",
  "cci.gui.text.confirmExit": "Detected changes. Are you sure you would like to exit?",
  "cci.gui.sidebar": "Sidebar",
  "cci.gui.stats.statsDisabled": "Statistics collection disabled!",
  "cci.gui.stats.header": "Content Creator Integration has taken effect on:",
  "cci.gui.stats.event": "%1$s %2$s %3$s events",
  "cci.gui.stats.eventAmount": "%1$s %2$s %3$s events totalling %4$s",
  "cci.gui.stats.eventNone": "No events...yet!",
  "cci.gui.stats.footer": "Consider donating via the CurseForge page!",
  "cci.gui.stats.tooltip": "\"Totalling X\" is just a total of bits/viewers/months/raiders, etc. Anything that was put in the amount variable.",
  "cci.gui.stats.reset": "Reset",
  "cci.gui.stats.resetFull": "Reset",
  "cci.gui.help.info": "Content Creator Integration - Editor GUI powered by Boxes & Stuff\n\nBest viewed in 1080p with a forced GUI scale of 2 (what is this, 2006?)\n\n\nThis Help window is for how to use this User Interface, and not how to use the mod (unfortunately)\n\nWindow on the left is purely for navigation.\nWindow on the right is purely for manipulation.\n\n\nManipulation (window on the RIGHT) Controls:-\n\nDouble Click: Add To/Edit (Hold SHIFT to edit, in Maps)\nRight Click: Remove/Delete\nClick & Drag (when in arrays) to reorder\nCtrl+X/C/V: Cut, Copy Paste\nWhen in Event Viewer: Ctrl+C/Ctrl+Shift+C copies the selected variable name/value\n\nManipulation Tip: You always have to go one level up to add to something. Double click on the \"conditions\" field to add a condition, double click on the configuration type in a Map to add a new Event, etc. If you are looking at the list of Events, you need to go one level up to add them.\n\nHolding SHIFT when exiting will save before exit.\n\n\n\n\"I hope this helpful help ui was helpful in helping you get some help.\" -AuscD",
  "cci.gui.help.stats": "Statistics",
  "cci.gui.help.debug": "Enable Debug",
  "cci.gui.help.docs": "Documentation",
  "cci.gui.edit.title": "Edit",
  "cci.gui.addCondition.title": "Add Condition",
  "cci.gui.addCondition.unconditional": "Unconditional.",
  "cci.gui.addOutcome.title": "Add Outcome",
  "cci.gui.addOutcome.potentiallyClientside": "There's a potential for this Outcome to be client-side only.",
  "cci.gui.eventViewer.hideVar": "Hide variable values\n\nHold SHIFT when opening the Event Viewer to enable this initially.",
  "cci.gui.eventViewer.dump": "Dump Events",
  "cci.gui.eventViewer.dumpTip": "Dumps cache events to a dump.json file.",
  "cci.gui.eventViewer.replay": "Replay this event",
  "cci.gui.eventViewer.notAVar": "Not actually a variable",
  "cci.gui.eventViewer.clearQueues": "Clear Queues",
  "cci.gui.eventViewer.clearQueuesTip": "Clear all your queues. In the event you get botted or something and have a flood of events in your queues. This clears them all.",
  "cci.gui.eventViewer.queuesCleared": "Queues cleared. There were %s queued events",
  "cci.gui.connections.title": "Connection Status",
  "cci.gui.connections.reconnect": "Reconnect",
  "cci.gui.connections.reconnectAll": "Hold SHIFT to reconnect ALL",
  "cci.gui.connections.disconnect": "Disconnect",
  "cci.gui.connections.disconnectAll": "Hold SHIFT to disconnect ALL",
  "cci.events.last": "Variables of the last %s events:",
  "cci.events.tooltip": "Hold Shift and Ctrl to show the values of the variables (limited to 5 events). This list is scrollable with the scroll wheel.",
  "cci.events.for": "Events for: %s",
  "cci.events.constants": "These are constant definitions. They're special and don't get events.",
  "cci.selected": "This window shows information about the selected element. Manipulate them with the controls under each browser window.",
  "cci.docs": "Full documentation for this mod can be found at: https://content-creator-integration.readthedocs.io",
  "cci.docs.tooltip": "Shift + Click to open URL",
  "cci.toast.connecting": "Connecting",
  "cci.toast.connected": "Connected",
  "cci.toast.authenticated": "Authenticated",
  "cci.toast.failed": "Failed to connect",
  "cci.toast.reconnecting": "Reconnecting",
  "cci.toast.disconnected": "Disconnected",
  "cci.toast.disablingReconnects": "Disabling reconnects",
  "cci.toast.failedReconnect": "Failed to reconnect",
  "cci.toast.loadedOnline": "Loaded online configs",
  "cci.toast.youtube.apiKeyEmpty": "API Key not defined!",
  "cci.toast.youtube.cannotGetChannelId": "Unable to get channel ID for %s!",
  "cci.toast.youtube.cannotGetBroadcastIdRetrying": "Unable to get broadcast video ID! Retrying in 60 seconds",
  "cci.toast.youtube.cannotGetBroadcastIdDisconnecting": "Unable to get broadcast video ID! Disconnecting",
  "cci.toast.youtube.cannotGetChatId": "Unable to get chat ID!",
  "cci.toast.youtube.errorDuringChat": "Error processing chat! Retrying.",
  "cci.toast.youtube.errorDuringChatDC": "Error processing chat! Disconnecting.",
  "cci.toast.youtube.ready": "Ready.",
  "cci.toast.pubsub.errorConsole": "Error - Check Console",
  "cci.component.EventConfiguration.configs": "List of event types and configurations",
  "cci.component.EventConfiguration.init": "List of events to execute when this configuration file gets loaded (and when it is reloaded).\n\nOnly global variables will be passed initially but you can add more variables in each event's conditions and outcomes. All events will be executed, the event's allowsOtherEventsToTrigger isn't used here.",
  "cci.component.EventConfiguration.type": "This is to define what type of EventConfiguration this is if pulled from an online source. Set by CCI when you are creating the config, eg: streamlabs/streamelements/chat/etc. Bear in mind that retrieving an online file will override local configs.",
  "cci.component.EventConfiguration.from": "This is the online source for this EventConfiguration. Set by CCI.",
  "cci.component.EventConfiguration.online": "This configuration file was from an online source.",
  "cci.component.Configuration.types": "List of event types",
  "cci.component.Configuration.queue": "List of event types to be queued.",
  "cci.component.Configuration.ignoredTypes": "List of event types to ignore.\nThese event types will not be triggered (and won't clutter your cache).",
  "cci.component.Configuration._for": "Which account/platform is this configuration for. If null, will be applied to all accounts.\n\nThis goes downwards so if a null for is found, the configurations below will be omitted entirely (it short circuits).",
  "cci.component.Event.name": "Optional name for this event, for Editor readability.",
  "cci.component.Event.constantName": "The name of mapping to the Constant Event to reference. If this is set, we check against the Constant Event's conditions and trigger their outcomes.",
  "cci.component.Event.disabled": "Disable this event?",
  "cci.component.Event.conditions": "List of conditions required to trigger the event.",
  "cci.component.Event.outcomes": "List of outcomes to trigger if the event meets the conditions.",
  "cci.component.Event.triggersFromAnyConditionMet": "Does this event trigger from any condition that is met?",
  "cci.component.Event.allowsOtherEventsToTrigger": "Does triggering this event still allow other events to trigger?",
  "cci.component.Event.singleOutcomeOnly": "If there are multiple outcomes for the event, only the first outcome that succeeds?",
  "cci.component.Event.playTime": "How long to play the event, in ticks. Only if the event type has been registered a queue. Set to -1 to skip the queue.",
  "cci.component.Event.playTimeEvent": "An event to trigger during the playTime of the Event ticks. Will have variables $currentPlayTime and $totalPlayTime inserted.",
  "cci.component.Event.delay": "How long of a delay, in ticks, before playing the event.",
  "cci.component.Event.cooldown": "How often this event can be triggered, in ticks.",
  "cci.component.Event.disableShortCircuitWhenOnCooldown": "Normally, if this event is on cooldown (and \"allowsOtherEventsToTrigger\" is disabled) and the conditions are met, this event stops other events triggering. This disables that.",
  "cci.component.Constants.info": "Additional info (for library purposes)",
  "cci.component.Constants.conditions": "Mapping of condition constants",
  "cci.component.Constants.outcomes": "Mapping of outcome constants",
  "cci.component.Constants.events": "Mapping of event constants",
  "cci.component.GameEventConfig.listeners": "List of Forge Event listeners.\n\nCAUTION: Using this feature may severely affect game performance. Use at your own risk!",
  "cci.component.Listener.name": "Optional name for this listener, for Editor readability.",
  "cci.component.Listener.disabled": "Is this listener disabled?",
  "cci.component.Listener.className": "The Class name for the Forge event you want to listen for. Eg: LivingDeathEvent or PlayerEvent$PlayerRespawnEvent",
  "cci.component.Listener.isFullName": "Are you using the full name of the Class, including the package names.",
  "cci.component.Listener.isServerEvent": "Is this Forge event only triggered on the server? (Dedicated Server use. Only allowed if you can send outcomes to the server.)",
  "cci.component.Listener.preAccessorEvent": "A convenience event if you'd like to set some variables before the accessors are triggered.",
  "cci.component.Listener.staticAccessors": "List of Accessors to access static methods and fields of Classes. Used together with ObjectAccessor's classForStaticAccess.",
  "cci.component.Listener.accessors": "List of Accessors to access the methods and the fields of the Event/Objects.",
  "cci.component.Listener.argBasedAccessors": "List of Accessors to trigger on objects you've stored in the variable map prior. Each mapping should match to an existing variable key/name.",
  "cci.component.Listener.event": "The Event that we will be passing all the variables into afterwards.",
  "cci.component.Listener.cancel": "Do you want to cancel the Forge event (if cancelable) after we trigger our event? Set final result as \"true\" to cancel.",
  "cci.component.ObjectAccessor.name": "Optional name for this accessor, for Editor readability.",
  "cci.component.ObjectAccessor.function": "The name of the field or method you want to access or call. Normally will be the SRG name, like field_12383_a or func_83726_d(). If you input brackets in it, CCI will automatically assume it is a method. If you put \"<>\", CCI will assume you want a Constructor. Using a method or constructor with parameters will require ParamInjectors. Check your log when testing the command, CCI will spit errors there.",
  "cci.component.ObjectAccessor.paramInjectors": "List of Parameter Injectors. Only used if your function is a method or a constructor, to provide the classes and object instances for the method.",
  "cci.component.ObjectAccessor.classForStaticAccess": "The full class name for the class you want to reference a static field/method with. Normally used with Listener's staticAccessors, but not required.",
  "cci.component.ObjectAccessor.preAccessorEvent": "A convenience event if you'd like to set some variables before the ObjectAccessors try to retrieve the Object.",
  "cci.component.ObjectAccessor.instanceCheck": "The full class path and name for an instanceof check. If the object isn't an instance of the class you define, we stop processing. Check your log when testing the command, CCI will spit errors there. Remove to disable an instanceof check.",
  "cci.component.ObjectAccessor.postAccessorEvent": "A convenience event if you'd like to set some variables after the result is saved but before the next set of accessors are triggered.",
  "cci.component.ObjectAccessor.nextAccessors": "List of Accessors you would like to pass the result of your function into for further processing.",
  "cci.component.ObjectAccessor.nullObjectEvent": "A convenience event if you'd like to set some variables or cancel processing after the result retrieved but is null.",
  "cci.component.ObjectAccessor.argName": "The name of the variable you want to save the result of your function into. Leave as null if you don't want to save it.",
  "cci.component.ParamInjector.isPrimitive": "Is the class a primitive type?",
  "cci.component.ParamInjector.classType": "The full class path and name for the class that this parameter is for. If isPrimitive is set to true, the classType is just the name of the primitive, eg: int, short, char. Special case: String is also supported.",
  "cci.component.ParamInjector.argToPull": "The name of the variable you stored the object instance in from other ObjectAccessor's argNames. If the variable doesn't exist or this is left as null, will insert null. If isPrimitive is set to true, this field can be used to create the primitive object. Having an variable by argToPull overrides this, however.",
  "cci.component.Condition.displayName": "Display name. What's this for?",
  "cci.component.Condition.inverseMatch": "If the condition isn't met, consider it met and vice versa.",
  "cci.component.SpecificUserCondition.description": "Use this to check for a specific username. Checks the \"$user\" variable.",
  "cci.component.SpecificUserCondition.username": "Username to check for.",
  "cci.component.SpecificUserCondition.caseSensitive": "Is this case sensitive?",
  "cci.component.SpecificAmountCondition.description": "Use this to check for a specific value.",
  "cci.component.SpecificAmountCondition.optionalVariableName": "Do you want to search for a specific variable name? Remove to look for the default variable \"amount\".",
  "cci.component.SpecificAmountCondition.amount": "Amount to check for.",
  "cci.component.RangedAmountCondition.description": "Use this to check for a range of values.",
  "cci.component.RangedAmountCondition.optionalVariableName": "Do you want to search for a specific variable name? Remove to look for the default variable \"amount\".",
  "cci.component.RangedAmountCondition.min": "Minimum range (inclusive). Remove to have no minimum range.",
  "cci.component.RangedAmountCondition.max": "Maximum range (inclusive). Remove to have no maximum range.",
  "cci.component.RangedAmountCondition.minVar": "Minimum range (inclusive) from a range. Takes priority over the number value.",
  "cci.component.RangedAmountCondition.maxVar": "Maximum range (inclusive) from a range. Takes priority over the number value.",
  "cci.component.MessageCondition.description": "Use this to check for a content in the event's message.",
  "cci.component.MessageCondition.optionalVariableName": "Do you want to search for a specific variable name? Remove to look for the default variable \"message\".",
  "cci.component.MessageCondition.exactPhrase": "Does this require an exact phrase?",
  "cci.component.MessageCondition.caseSensitive": "Is this phrase case sensitive?",
  "cci.component.MessageCondition.phrase": "What is the phrase?",
  "cci.component.VariableCondition.description": "Use this to check the value of a specific variable.",
  "cci.component.VariableCondition.variableName": "The name of the variable you are targeting.",
  "cci.component.VariableCondition.variableResult": "The result you are hoping to match with. If you are looking to see if this is contained in within the variable result, use MessageCondition instead with optionalVariableName set.",
  "cci.component.VariableCondition.caseSensitive": "Be case sensitive?",
  "cci.component.VariableCondition.isGlobal": "Check from global variables.",
  "cci.component.VariableExistsCondition.description": "Use this to check if a variable exists.",
  "cci.component.VariableExistsCondition.variableName": "The name of the variable you are targeting.",
  "cci.component.VariableExistsCondition.isGlobal": "Check if it's specifically a global variable.",
  "cci.component.VariableIsNumberCondition.description": "Use this to check if a variable is a number.",
  "cci.component.VariableIsNumberCondition.variableName": "The name of the variable you are targeting.",
  "cci.component.VariableRemoveCondition.description": "Removes a variable from the variables list.",
  "cci.component.VariableRemoveCondition.variableName": "The name of the variable you are targeting.",
  "cci.component.VariableRemoveCondition.isGlobal": "Removes this variable from the global variables as well.",
  "cci.component.RandomCondition.description": "Use this to for a random chance for this condition to be met.",
  "cci.component.RandomCondition.chance": "What is the chance for this condition to be met? 0.0 to 1.0.",
  "cci.component.TargetExistsCondition.description": "Use this to see if a certain target exists or not.",
  "cci.component.TargetExistsCondition.target": "Target selector string to target.",
  "cci.component.NoteCondition.description": "Use this condition to load a note/note array into a variable. It will fail if the note/note array doesn't exist. Put note conditions higher up so the later conditions and outcomes will be able to use what's in the variable.",
  "cci.component.NoteCondition.noteName": "Name of the note.",
  "cci.component.NoteCondition.variableName": "Name of the variable to insert the note/note array. Will override event variables if they already exist.",
  "cci.component.NoteCondition.loadNotesArray": "Load the notes array instead of the simple note?",
  "cci.component.NoteCondition.meetConditionIfNoteDoesNotExist": "Should this condition be met even if the note or note array doesn't exist or has expired?",
  "cci.component.NoteCondition.defaultVariableValue": "If the note does not exist, should there be a default variable value set? (Use commas with a space, for separate objects in arrays)",
  "cci.component.NoteCondition.allowExpired": "Allow the condition to pass even if the note has expired.",
  "cci.component.MultipleConditionCondition.description": "Use this condition for multiple conditions. Potentially used for a nested OR statement if \"any\" is turned on.",
  "cci.component.MultipleConditionCondition.conditions": "Array of conditions.",
  "cci.component.MultipleConditionCondition.any": "Will any of the conditions met trigger this condition? Basically an AND and OR switch.",
  "cci.component.ConstantCondition.description": "Use this condition to call a constant condition.",
  "cci.component.ConstantCondition.name": "Name of the constant condition.",
  "cci.component.ModExistsCondition.description": "Use this condition to check if a mod is loaded.",
  "cci.component.ModExistsCondition.modId": "ID of the mod.",
  "cci.component.ServerCondition.description": "Condition will be met if you can trigger server-side outcomes.",
  "cci.component.TargetCondition.description": "Insert a specific target's information into a variable. Will fail if target or argument cannot be found.",
  "cci.component.TargetCondition.target": "Target selector string to target.",
  "cci.component.TargetCondition.argument": "Arguments: name, uuid, health, armor, location[x/y/z], rotation<yaw/pitch>, look[x/y/z][number], radius[x/y/z/h][number], biome, dim/dimension, light[block], diff/difficulty, time, day",
  "cci.component.TargetCondition.variableName": "Variable name to insert the result into.",
  "cci.component.ArithmeticCondition.description": "Do simple arithmetic calculations on variables. Inserts 0 if something failed. Will always return a double-type number. Use round/floor/ceil to convert value1 to a integer-type (whole number).",
  "cci.component.ArithmeticCondition.calc": "Function to use: +, -, x, /, pow, sqrt, mod, max, min, round, floor, ceil, log, signum, abs, sin, cos, tan, asin, acos, atan. Trigonometric functions uses degrees. Some operations only use the first variable.",
  "cci.component.ArithmeticCondition.value1": "First value, can be a variable name or number.",
  "cci.component.ArithmeticCondition.value2": "Second value, can be a variable name or number.",
  "cci.component.ArithmeticCondition.variableName": "Variable name to insert the result into.",
  "cci.component.RandomNumberCondition.description": "Gets a random number between two values.",
  "cci.component.RandomNumberCondition.value1": "First value, can be a variable name.",
  "cci.component.RandomNumberCondition.value2": "Second value, can be a variable name.",
  "cci.component.RandomNumberCondition.variableName": "Variable name to insert the result into.",
  "cci.component.RandomNumberCondition.roundNumber": "Round off the number to the nearest Integer?",
  "cci.component.StringConcatCondition.description": "Puts two objects together into a variable as a String.",
  "cci.component.StringConcatCondition.prefix": "First part. Supports variables.",
  "cci.component.StringConcatCondition.suffix": "Last part. Supports variables.",
  "cci.component.StringConcatCondition.variableName": "Name of the variable to insert into.",
  "cci.component.StringCompareToCondition.description": "Compares a String to another String (for ordering).",
  "cci.component.StringCompareToCondition.source": "Source String.",
  "cci.component.StringCompareToCondition.target": "String to compare with.",
  "cci.component.StringCompareToCondition.result": "Name of the variable to insert the result into.",
  "cci.component.StringIndexOfCondition.description": "Checks a String for the index of the target String.",
  "cci.component.StringIndexOfCondition.source": "Source String.",
  "cci.component.StringIndexOfCondition.target": "Target String.",
  "cci.component.StringIndexOfCondition.last": "Check for last index instead of first index",
  "cci.component.StringIndexOfCondition.result": "Name of the variable to insert the result into.",
  "cci.component.StringLowerCaseCondition.description": "Converts a String to lower case.",
  "cci.component.StringLowerCaseCondition.source": "Source String.",
  "cci.component.StringLowerCaseCondition.result": "Name of the variable to insert the result into.",
  "cci.component.StringReplaceCondition.description": "Replaces a String within a String with another String. Supports regex.",
  "cci.component.StringReplaceCondition.source": "Source String.",
  "cci.component.StringReplaceCondition.target": "Target String.",
  "cci.component.StringReplaceCondition.replacement": "Replacement String.",
  "cci.component.StringReplaceCondition.result": "Name of the variable to insert the result into.",
  "cci.component.StringReplaceCondition.literal": "Use this to use a literal string rather than a regex pattern matcher.",
  "cci.component.StringSplitCondition.description": "Splits a string with the defined pattern. Result is an array.",
  "cci.component.StringSplitCondition.source": "Source String.",
  "cci.component.StringSplitCondition.separator": "Pattern to split by.",
  "cci.component.StringSplitCondition.result": "Name of the variable to insert the result into. Result is an array.",
  "cci.component.StringSplitCondition.omitEmptyStrings": "Do we omit empty strings?",
  "cci.component.StringSubStringCondition.description": "Takes a part of a String based on the given parameters. Fails if the indices are incorrect.",
  "cci.component.StringSubStringCondition.source": "Source String.",
  "cci.component.StringSubStringCondition.beginIndex": "Start index for substring.",
  "cci.component.StringSubStringCondition.endIndex": "End index for substring.",
  "cci.component.StringSubStringCondition.result": "Name of the variable to insert the result into.",
  "cci.component.StringTrimCondition.description": "Trims the whitespace around a String.",
  "cci.component.StringTrimCondition.source": "Source String.",
  "cci.component.StringTrimCondition.result": "Name of the variable to insert the result into.",
  "cci.component.StringUpperCaseCondition.description": "Converts a String to upper case.",
  "cci.component.StringUpperCaseCondition.source": "Source String.",
  "cci.component.StringUpperCaseCondition.result": "Name of the variable to insert the result into.",
  "cci.component.StringLengthCondition.description": "Puts the length of a string into a variable.",
  "cci.component.StringLengthCondition.variableName": "Source String.",
  "cci.component.StringLengthCondition.variableResult": "Name of the variable to insert the result into.",
  "cci.component.StringContainsCondition.description": "Checks if a string contains a target string.",
  "cci.component.StringContainsCondition.source": "Source String.",
  "cci.component.StringContainsCondition.target": "Target String.",
  "cci.component.StringEndsWithCondition.description": "Checks if a string ends with a target string.",
  "cci.component.StringEndsWithCondition.source": "Source String.",
  "cci.component.StringEndsWithCondition.target": "Target String.",
  "cci.component.StringEqualsCondition.description": "Checks if a string equals to the target string.",
  "cci.component.StringEqualsCondition.source": "Source String.",
  "cci.component.StringEqualsCondition.target": "Target String.",
  "cci.component.StringStartsWithCondition.description": "Checks if a string starts with a target string.",
  "cci.component.StringStartsWithCondition.source": "Source String.",
  "cci.component.StringStartsWithCondition.target": "Target String.",
  "cci.component.RequestStatisticsCondition.description": "If you want to check the player's statistics, you need to request this from the server first. Put this in an event and in that same event, set a reasonable delay, such as 10 ticks or so (varies depending on player ping). In one of the outcomes, use an EventOutcome that has a StatisticsCondition to actually check the stat and act upon it.",
  "cci.component.StatisticsCondition.description": "Checks for a player statistic. Please look at RequestStatisticsCondition first. Will return false if the statistics lookup failed.",
  "cci.component.StatisticsCondition.statToCheck": "The registry key for the stat you want to check.",
  "cci.component.StatisticsCondition.variableName": "The variable to put the statistic number into. Will return false if the statistics lookup failed.",
  "cci.component.GlobalVariableCondition.description": "(DEPRECATED) Writes information into a global variable that will can be used elsewhere in other events. Local variables of the same name will still override these. If you want to check the content of a variable, use VariableCondition",
  "cci.component.GlobalVariableCondition.variableName": "Name of the global variable to insert into.",
  "cci.component.GlobalVariableCondition.variableInput": "Content of the variable you are inserting into.",
  "cci.component.VariableInsertCondition.description": "Writes information into a variable to be used by other conditions/outcomes.",
  "cci.component.VariableInsertCondition.variableName": "Name of the variable to insert into.",
  "cci.component.VariableInsertCondition.variableInput": "Content of the variable you are inserting into.",
  "cci.component.VariableInsertCondition.isGlobal": "Adds this variable to the global variables as well.",
  "cci.component.VariableIsArrayCondition.description": "Use this to check if a variable is an array.",
  "cci.component.VariableIsArrayCondition.variableName": "The name of the variable you are targeting.",
  "cci.component.ArrayCondition.description": "Use this to check for a String in an array from a specific variable.",
  "cci.component.ArrayCondition.variableName": "The name of the variable you are targeting.",
  "cci.component.ArrayCondition.variableResult": "The result you are hoping to match with within the array.",
  "cci.component.ArrayCondition.caseSensitive": "Be case sensitive?",
  "cci.component.ArrayLengthCondition.description": "Gets the length of an array. Fails if the variable isn't an array.",
  "cci.component.ArrayLengthCondition.variableName": "The name of the variable that stores the array.",
  "cci.component.ArrayLengthCondition.variableOutputName": "The name of the variable to store the result.",
  "cci.component.ArrayCombineCondition.description": "Combines two arrays. Fails if either variables are not arrays.",
  "cci.component.ArrayCombineCondition.variableName1": "The name of the variable with the first array.",
  "cci.component.ArrayCombineCondition.variableName2": "The name of the variable with the second array.",
  "cci.component.ArrayCombineCondition.variableOutputName": "The name of the variable to store the combined array.",
  "cci.component.ArrayDeleteCondition.description": "Deletes a string from the array. Fails if the variable is not an array or the string is not found in the array.",
  "cci.component.ArrayDeleteCondition.variableName": "The name of the variable that stores the array.",
  "cci.component.ArrayDeleteCondition.stringToRemove": "String to remove from the array.",
  "cci.component.ArrayAppendCondition.description": "Adds a string to the array. Fails if the variable is not an array.",
  "cci.component.ArrayAppendCondition.variableName": "The name of the variable that stores the array.",
  "cci.component.ArrayAppendCondition.stringToAdd": "String to add to the array.",
  "cci.component.ArrayAppendCondition.create": "Create the array if it doesn't exist?",
  "cci.component.ArrayAppendCondition.isGlobal": "Add to global variables?",
  "cci.component.ArrayExplodeCondition.description": "Explodes the array into a different variable per object. Fails if the variable isn't an array.",
  "cci.component.ArrayExplodeCondition.variableName": "The name of the variable that stores the array.",
  "cci.component.ArrayExplodeCondition.variableOutputName": "The name of the variable to store the results. Size of array will be stored in variable <name>Length, and each individual object will be stored in variable <name>...(length-1)",
  "cci.component.RandomStringCondition.description": "Gets a random string from a list of strings.",
  "cci.component.RandomStringCondition.values": "Array of strings to pick from.",
  "cci.component.RandomStringCondition.variableName": "Variable name to insert the result into.",
  "cci.component.NullCondition.description": "A condition that is just always met.",
  "cci.component.ReadFileCondition.description": "Gets the lines of a file. Each line will be in variable $<file_name>_<line>, eg \"$file_1\", \"$file_2\". Total lines will be in $<file_name>_count, eg \"$deathcounts.txt_count\". Fails if the file doesn't exist or there is an error reading the file.",
  "cci.component.ReadFileCondition.fileName": "File Name. File must be in your profile directory.",
  "cci.component.ConditionalCondition.description": "A condition, that if passes or fails, triggers a specific condition. A pre-check if you want.",
  "cci.component.ConditionalCondition.condition": "The condition to check first.",
  "cci.component.ConditionalCondition.passCondition": "If the condition passes, return this condition's result.",
  "cci.component.ConditionalCondition.failCondition": "If the condition fails, return this condition's results. Optional. Will return false if the condition is not met and this is not set.",
  "cci.component.JsonSafeCondition.description": "Makes Strings safe to be inserted into JSON lines",
  "cci.component.JsonSafeCondition.variableName": "Source string.",
  "cci.component.JsonSafeCondition.variableResult": "Name of the variable to insert the result into.",
  "cci.component.RepeatCondition.description": "A condition that repeatedly calls a condition. This is for functional conditions.",
  "cci.component.RepeatCondition.times": "How many times to repeat the condition? The iteration count is stored in the $iteCount variable.",
  "cci.component.RepeatCondition.arrayVariable": "Variable to pull an array. If this is used, 'times' is ignored, and the array will be looped through instead. The array content being looped through will be put in the $arrayObject variable which is removed once it is done. The iteration count is stored in the $iteCount variable.",
  "cci.component.RepeatCondition.condition": "The condition to repeat.",
  "cci.component.RepeatCondition.breakCondition": "A condition, if met, breaks the loop cycle.",
  "cci.component.GameSettingsCondition.description": "Checks a Game Setting from the file.",
  "cci.component.GameSettingsCondition.key": "Key to check.",
  "cci.component.GameSettingsCondition.value": "Value to compare to value on file.",
  "cci.component.InventoryCondition.description": "Checks a for inventory slots and puts the first itemstack into a variable. Fails if we can't find a single inventory slot from all targets.",
  "cci.component.InventoryCondition.target": "Target selector string to target.",
  "cci.component.InventoryCondition.index": "Index in the inventory to look for.",
  "cci.component.InventoryCondition.variableName": "Variable name to put the result into.",
  "cci.component.NotesListCondition.description": "Put the list of note names into an array.",
  "cci.component.NotesListCondition.variableName": "Variable to put the array into.",
  "cci.component.PlayerStateCondition.description": "Checks a few states of the client player.",
  "cci.component.PlayerStateCondition.state": "State to check (use one): alive, invisible, onFire, onGround, poisoned, sleeping, sneaking, swimming, isInWater, isInWaterOrRain, isInWaterOrBubble, isInWaterRainOrBubble, usingItem, withering, exists",
  "cci.component.TwoHighSpaceCondition.description": "Finds for a two block high air space around a target (customisable). Works similarly to the spreadplayers command. Condition fails if we cannot find one after the defined number of tries.",
  "cci.component.TwoHighSpaceCondition.target": "Target selector string to target.",
  "cci.component.TwoHighSpaceCondition.horiRadius": "Horizontal radius the check.",
  "cci.component.TwoHighSpaceCondition.vertRadius": "Vertical radius to check. Make sure two of this is higher than Custom Height.",
  "cci.component.TwoHighSpaceCondition.tries": "How many tries (horizontally) we try and check. Try not to put this too excessively high.",
  "cci.component.TwoHighSpaceCondition.variableName": "Variable name to put the result into.",
  "cci.component.TwoHighSpaceCondition.customHeight": "Custom Height. If left out, defaults to 2. Make sure two of vertRadius is higher than this number.",
  "cci.component.LogArgsCondition.description": "Prints the variables when this condition is triggered to the console/log.",
  "cci.component.Base64EncodeCondition.description": "Encodes a string to Base64 and inserts it into a variable.",
  "cci.component.Base64EncodeCondition.value": "Value to encode.",
  "cci.component.Base64EncodeCondition.variableName": "Variable name to put the result into.",
  "cci.component.Base64DecodeCondition.description": "Decodes a string from Base64 and inserts it into a variable.",
  "cci.component.Base64DecodeCondition.value": "Value to decode.",
  "cci.component.Base64DecodeCondition.variableResult": "Variable name to put the result into.",
  "cci.component.LocalisedStringCondition.description": "Converts a translation key to its localised value on a client.",
  "cci.component.LocalisedStringCondition.value": "Translation key to use.",
  "cci.component.LocalisedStringCondition.variableResult": "Variable name to put the result into.",
  "cci.component.Outcome.displayName": "Display name. What's this for?",
  "cci.component.Outcome.weight": "The weight of this outcome, if there are multiple outcomes for this event.",
  "cci.component.Outcome.disabled": "Disable this outcome?",
  "cci.component.CommandOutcome.description": "Trigger a client-side or server-side command.",
  "cci.component.CommandOutcome.command": "String to be put into the command.",
  "cci.component.CommandOutcome.executeAsSelf": "Should the command be executed as the streamer or the server?",
  "cci.component.CommandOutcome.isClientSideCommand": "Is the command a client side command?",
  "cci.component.CommandOutcome.handleFeedback": "How to handle the feedback of the command? Leave it as null to silence feedback (will not silence command errors). Leave it an empty string to allow the feedback. Put a name in to attempt to capture the feedback into a global variable of said name (only if the command is \"executeAsSelf\"). This listens for feedback from the server and will stop after a second. Bear in mind that CCI has to guess which chat message received is the feedback from the command, so do your testing! Allows variable insertion for the name. The feedback can not be used in the same event, as there will be a delay from sending the command to the server and to wait for the feedback. To use the feedback you will need to use a staggered event, or another event and a later time.",
  "cci.component.CommandOutcome.feedbackKeys": "To be used with \"handleFeedback\". If you know which feedback translation keys to listen for, put them in the array. If not, leave null, and CCI will capture the first available command feedback. To be used with commands that return several lines of feedback. Eg: Doing \"/time query daytime\" will return a localizable string with the key \"commands.time.query\". Add that if you want to capture just that one feedback line.",
  "cci.component.CommandOutcome.disableChatCommandFallback": "If you are connected to a server where you don't have CCI permissions/server doesn't have CCI installed, and \"executeAsSelf\" is enabled, CommandOutcome tries to send a chat message with the command instead. Turning this on disables that.",
  "cci.component.CommandOutcome.chat.fallbackWarning": "[CCI - WARNING] Using chat fallback for CommandOutcome with text longer than 256 characters. Expect errors!",
  "cci.component.CommandOutcome.chat.illegalChar": "[CCI - WARNING] Using chat fallback for CommandOutcome. Message has illegal characters, command not sent!",
  "cci.component.CommandOutcome.chat.illegalCharString": "[CCI - WARNING] Illegal character: %1$s . In command: %2$s",
  "cci.component.SoundOutcome.description": "Play a sound either client-side or server-side.",
  "cci.component.SoundOutcome.clientSide": "Is the sound to be played on the client? \"target\" is ignored if this is \"true\"",
  "cci.component.SoundOutcome.sound": "The sound name, in resource location format. EG minecraft:entity.pig.ambient",
  "cci.component.SoundOutcome.target": "The target selector for the sound. Only for non-client side sounds.",
  "cci.component.SoundOutcome.volume": "Volume of the sound",
  "cci.component.SoundOutcome.pitch": "Pitch of the sound",
  "cci.component.SoundOutcome.category": "Category of the sound. EG: \"ambient\" or \"music\". Defaults to \"master\" if CCI cannot find your category.",
  "cci.component.EventOutcome.description": "Attempt to trigger even more events. Use this to trigger delayed events, such as when Requesting Statistics or awaiting Command Feedback. Be mindful that the event's conditions are checked before triggering, so any functional conditions need to be done in a ConditionalOutcome instead, if the event has a delay.",
  "cci.component.EventOutcome.events": "List of events to attempt to trigger.",
  "cci.component.NoteOutcome.description": "Writes a note to file.",
  "cci.component.NoteOutcome.noteName": "Name of the note. If a note already exists by this name, it will be overwritten. You can use the note condition to see if the note exists first.",
  "cci.component.NoteOutcome.noteContent": "Content of note.",
  "cci.component.NoteOutcome.append": "Add the content to the end of the simple note, or add a new element into the notes array?",
  "cci.component.NoteOutcome.putInNotesArray": "Do we put the note content into the notes array?",
  "cci.component.NoteOutcome.expiresIn": "How much time after the event does the note expire? Set to \"null\" to remove an already set expiry date. Supports: y, d, h, m, s for Years, Days, Hours, Minutes, Seconds. Format: \"2d7h32m19s\" means 2 days, 7 hours, 32 minutes and 19 seconds from the event triggering. You can omit any magnitude of time (years/days/hours/mins/secs) which is zero.",
  "cci.component.MountOutcome.description": "Makes an entity mount another entity. Returns false if it failed.",
  "cci.component.MountOutcome.riderTarget": "Target selector for the rider.",
  "cci.component.MountOutcome.riddenTarget": "Target selector for the entity to be ridden.",
  "cci.component.MountOutcome.force": "Force the ride.",
  "cci.component.MountOutcome.forceToTop": "Force the rider to ride the topmost entity on the entity to ride.",
  "cci.component.MultipleOutcomeOutcome.description": "Use this outcome for multiple outcomes. For times you want only a single outcome to be triggered but at the same time, multiple.",
  "cci.component.MultipleOutcomeOutcome.outcomes": "List of outcomes",
  "cci.component.MultipleOutcomeOutcome.singleOutcomeOnly": "Stop on the first outcome that succeeds?",
  "cci.component.ConstantOutcome.description": "Use this outcome to call a constant outcome.",
  "cci.component.ConstantOutcome.name": "Name of the constant outcome.",
  "cci.component.ConditionalOutcome.description": "Use this outcome to check for a specific condition before triggering.",
  "cci.component.ConditionalOutcome.condition": "The condition to check.",
  "cci.component.ConditionalOutcome.outcome": "The outcome to trigger.",
  "cci.component.ConditionalOutcome.conditionNotMetOutcome": "An optional outcome to trigger if the condition isn't met.",
  "cci.component.ChatMessageOutcome.description": "Use this outcome to send put a message in chat if the player is in the world.",
  "cci.component.ChatMessageOutcome.message": "Message to send. Supports Minecraft's Text Formatting",
  "cci.component.ChatMessageOutcome.inActionBar": "Put the message in the player's Action Bar instead?",
  "cci.component.ChatMessageOutcome.sendToServer": "Send the message to the server instead? (No Action Bar support)",
  "cci.component.ChatMessageOutcome.sendToServer.noCommands": "[CCI - WARNING] Sneaky sneaky, no sending commands with a ChatMessageOutcome!",
  "cci.component.ToastOutcome.description": "Use this outcome to send put a message in chat if the player is in the world.",
  "cci.component.ToastOutcome.toastType": "Toast background type. 0 - 3. 0 = Advancement. 1 = Recipe. 2 = Narrator. 3 = System.",
  "cci.component.ToastOutcome.title": "Title for the toast.",
  "cci.component.ToastOutcome.subtitle": "Subtitle for the toast",
  "cci.component.ToastOutcome.titleColor": "Color for the title. Supports hex values.",
  "cci.component.ToastOutcome.subtitleColor": "Color for the subtitle. Supports hex values.",
  "cci.component.NullOutcome.description": "An outcome that does nothing.",
  "cci.component.NoteDeletionOutcome.description": "Deletes info of a note. If the note is empty then it will be removed anyway.",
  "cci.component.NoteDeletionOutcome.noteName": "Name of the note.",
  "cci.component.NoteDeletionOutcome.deletionType": "Deletion type for note. 0 = Entire note. 1 = Simple note. 2 = Notes array. 3 = Content within notes array.",
  "cci.component.NoteDeletionOutcome.noteContent": "Content to remove from array. Only used if deletionType is 3.",
  "cci.component.RepeatOutcome.description": "An outcome that repeatedly attempts an outcome.",
  "cci.component.RepeatOutcome.times": "How many times to repeat the outcome? The iteration count is stored in the $iteCount variable.",
  "cci.component.RepeatOutcome.arrayVariable": "Variable to pull an array. If this is used, 'times' is ignored, and the array will be looped through instead. The array content being looped through will be put in the $arrayObject variable which is removed once it is done. The iteration count is stored in the $iteCount variable.",
  "cci.component.RepeatOutcome.outcome": "The outcome to repeat.",
  "cci.component.RepeatOutcome.breakCondition": "A condition, if met, breaks the loop cycle.",
  "cci.component.HealthOutcome.description": "Heal or damage a list of targets.",
  "cci.component.HealthOutcome.target": "The target selector for the entities to affect.",
  "cci.component.HealthOutcome.amount": "Amount of health to change. Positive values heal, negative values hurt.",
  "cci.component.IMCOutcome.description": "Sends an InterModComms runtime message to another mod.",
  "cci.component.IMCOutcome.modId": "The modId of the mod to send this message to.",
  "cci.component.IMCOutcome.subject": "The key/subject of the IMC message.",
  "cci.component.IMCOutcome.message": "The value/message of the IMC message.",
  "cci.component.PopupOutcome.description": "Pop-up a window that requires the player to hit Done.",
  "cci.component.PopupOutcome.text": "The information text for the pop up.",
  "cci.component.PopupOutcome.postOkOutcome": "An optional outcome to trigger after the player hits Done.",
  "cci.component.PromptOutcome.description": "Pop-up a window that requires the player to hit Yes or No.",
  "cci.component.PromptOutcome.text": "The information text for the pop up.",
  "cci.component.PromptOutcome.yesOverride": "Override text for the Yes button?",
  "cci.component.PromptOutcome.noOverride": "Override text for the No button?",
  "cci.component.PromptOutcome.yesOutcome": "An optional outcome to trigger after the player hits Yes.",
  "cci.component.PromptOutcome.noOutcome": "An optional outcome to trigger after the player hits No.",
  "cci.component.InputOutcome.description": "Pop-up a window that requires the player to input some text.",
  "cci.component.InputOutcome.text": "The information text for the pop up.",
  "cci.component.InputOutcome.defaultInput": "Default text for the input box.",
  "cci.component.InputOutcome.variableInput": "The variable name to put the String from the input box once the player hits Done.",
  "cci.component.InputOutcome.postInputOutcome": "An outcome to trigger after the player hits Done. Bear in mind that the variable this InputOutcome inserts into is not a global variable and thus will be discarded if not stored in one.",
  "cci.component.NarratorOutcome.description": "Uses the built in Narrator support to speak audibly.",
  "cci.component.NarratorOutcome.message": "Message for narrator to say. Supports variable insertion",
  "cci.component.NarratorOutcome.interrupts": "Interrupts the currently speaking narrator line.",
  "cci.component.MotionOutcome.description": "Adjust the motion of a set of entities",
  "cci.component.MotionOutcome.target": "The target selector for the entities to affect.",
  "cci.component.MotionOutcome.amount": "The amount of motion to apply.",
  "cci.component.MotionOutcome.axis": "The axis to apply the motion to. Supports \"x\", \"y\", \"z\".",
  "cci.component.MotionOutcome.relative": "Should the motion applied be relative to the entity instead of absolute?",
  "cci.component.MotionOutcome.doOnPlayer": "Apply this to just the player? Due to how Minecraft works, the player on the client has it's own motion and cannot be modified by the server.",
  "cci.component.GameSettingsOutcome.description": "Sets a Game Setting to the file, and forces a Game Settings reload.",
  "cci.component.GameSettingsOutcome.key": "Key to set. The key can be found in options.txt, EG: mainHand:right, the key is \"mainHand\"",
  "cci.component.GameSettingsOutcome.value": "Value to set. Depends on the line in options.txt.",
  "cci.component.KeyPressOutcome.description": "Sets a keybind to the set pressed state. Either keyName, inputName, or rawInput needs to be set. CCI tries them in that order.",
  "cci.component.KeyPressOutcome.keyName": "Keybind to set. Key name can be found in options.txt. EG: key_key.forward:key.keyboard.w, the key is \"key.forward\". Omit the \"key_\" prefix.",
  "cci.component.KeyPressOutcome.inputName": "Directly presses a key. Input name can be found in options.txt. EG: key_key.forward:key.keyboard.w, the input name is \"key.keyboard.w\".",
  "cci.component.KeyPressOutcome.rawInput": "Direct raw input in numbers. Bit technical, but for when all else fails (or if you want to add modifiers). Split with commas. Order them by: keyCode/button,scanCode/isMouse(-1),action,modifiers. Bit technical but look up \"GLFW keyboard keycodes\" or \"GLFW key modifiers\" for some guidance.\n\nscanCode generally doesn't really matter if you're using key codes, and set it to -1 if you want to trigger a mouse input instead\n\nAction is 1 for pressed, 0 for unpress\n\nEG: 87,17,1,0 to press down the W key (on QWERTY keyboards) with no modifiers",
  "cci.component.KeyPressOutcome.pressed": "Pressed state to set. Keeping it as \"null\" unpresses the key. Ignored on rawInput.",
  "cci.component.FoodOutcome.description": "Adds a certain stat to players' food stats. Either level and saturation, or exhaustion.",
  "cci.component.FoodOutcome.target": "The target selector for the entities to affect.",
  "cci.component.FoodOutcome.level": "Level/Healing to add.",
  "cci.component.FoodOutcome.saturation": "Saturation to add.",
  "cci.component.FoodOutcome.exhaustion": "Exhaustion to add.",
  "cci.component.InventoryOutcome.description": "Manipulate the inventories of a set of entities matching the target selector.",
  "cci.component.InventoryOutcome.target": "The target selector for the entities to affect.",
  "cci.component.InventoryOutcome.funcType": "Available types: drop, swap, amount, delete, playerSwap, add",
  "cci.component.InventoryOutcome.index": "The index/slot number for the inventories. Used by all types except playerSwap. For reference, it should be: 0-35 for Main Inventory, 36-39 for Armor, 40 for Off hand, 41+ for modded inventories. For some funcs, -1 means current item.",
  "cci.component.InventoryOutcome.additionalArgs": "Additional arguments:\nFor Drop & Delete: The item stack count.\nFor Swap: The index/slot to swap with.\nFor Amount: The amount to increase/decrease the stack by.\nFor Player Swap: The target selector for the other player.\nFor Add: A string denoting what item to give and the count. Essentially the bit after \"/give <target> \" in the give command, like \"minecraft:dirt 3\" gives 3 dirt blocks",
  "cci.component.GameCrashOutcome.description": "Forces the game to crash.",
  "cci.component.GameCrashOutcome.crashType": "Type of crash: 1 = System exit. 2 = System crash (careful, JVM doesn't really like this! Could potentially cause corruption). 3 = Minecraft crash. 4 = Minecraft stack overflow crash. 5 = Minecraft freeze/lock up.",
  "cci.component.FakeCrashOutcome.description": "Pretends to crash the game.",
  "cci.component.FakeCrashOutcome.crashType": "Type of crash: 1 = Freeze. 2 = Out of Memory Screen.",
  "cci.component.FakeCrashOutcome.crashDuration": "The duration of the fake crash, in ticks. Defaults to 5 seconds.",
  "cci.component.WriteToFileOutcome.description": "Writes a string to a file in your Profile folder.",
  "cci.component.WriteToFileOutcome.fileName": "Name of your file. Remember not to overwrite your json files!",
  "cci.component.WriteToFileOutcome.content": "The content of the file.",
  "cci.component.WriteToFileOutcome.append": "To append to the file (if it already exists), or to overwrite?",
  "cci.component.ReadFromUrlOutcome.description": "Reads from a URL as a String.",
  "cci.component.ReadFromUrlOutcome.url": "URL to read from.",
  "cci.component.ReadFromUrlOutcome.variableName": "The variable name to insert the contents of the URL.",
  "cci.component.ReadFromUrlOutcome.outcome": "The outcome to trigger after the URL is retrieved.",
  "cci.component.ObjectAccessorOutcome.description": "Triggers ObjectAccessors with the player object as reference. Look into listening for Minecraft events on more info on how to use this.",
  "cci.component.ObjectAccessorOutcome.accessors": "List of your accessors.",
  "cci.component.ObjectAccessorOutcome.isServerSide": "Should this outcome be sent to the server?",
  "cci.component.CCIChangeProfileOutcome.description": "Changes the active CCI profile.",
  "cci.component.CCIChangeProfileOutcome.profile": "Name of the profile to change to.",
  "cci.component.CCIChangeProfileOutcome.disableToast": "Disables the toasts from popping up after the outcome triggers.",
  "cci.component.CCIClearQueueOutcome.description": "Clears off any queued events to trigger. Basically the same button in the Event Viewer.",
  "cci.component.CCIFromJsonOutcome.description": "Creates a condition, outcome, or event from a source string and triggers it.",
  "cci.component.CCIFromJsonOutcome.source": "The source string to try and convert to a condition, outcome, or event.",
  "cci.component.CCISendToPlayerOutcome.description": "Sends an Outcome to another whitelisted player.",
  "cci.component.CCISendToPlayerOutcome.player": "The player name you are targeting.",
  "cci.component.CCISendToPlayerOutcome.outcome": "The outcome to trigger on the player.",
  "cci.component.CCISendToPlayerOutcome.silenceErrors": "If you want to disable error messages (player not whitelisted, player not found).",
  "cci.component.CCISendToPlayerOutcome.error.notWhitelisted": "[CCI] %s is not whitelisted.",
  "cci.component.CCISendToPlayerOutcome.error.notFound": "[CCI] Player %s not found.",
  "cci.component.CCISendEventToSocketOutcome.description": "Sends the variables for this event to another Socket.",
  "cci.component.CCISendEventToSocketOutcome.configType": "The name of the Socket you are sending this event to.",
  "cci.component.CCISendEventToSocketOutcome.platform": "The platform for this Event. Can be null.",
  "cci.component.CCISendEventToSocketOutcome.eventType": "The event type for this Event."
}